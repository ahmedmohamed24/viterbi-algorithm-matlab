-- -------------------------------------------------------------
-- 
-- File Name: Z:\Documents\Viterbi Algorithm\final\codegen\ConEncoder\hdlsrc\ConEncoder_fixpt_tb.vhd
-- Created: 2021-07-07 20:20:02
-- 
-- Generated by MATLAB 9.4, MATLAB Coder 4.0 and HDL Coder 3.12
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ConEncoder_fixpt_tb
-- Source Path: 
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_textio.ALL;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
LIBRARY STD;
USE STD.textio.ALL;
LIBRARY work;
USE work.ConEncoder_fixpt_pkg.ALL;
USE work.ConEncoder_fixpt_tb_pkg.ALL;

ENTITY ConEncoder_fixpt_tb IS
END ConEncoder_fixpt_tb;


ARCHITECTURE rtl OF ConEncoder_fixpt_tb IS

  -- Component Declarations
  COMPONENT ConEncoder_fixpt
    PORT( in_rsvd                         :   IN    std_logic_vector(0 TO 9);  -- ufix1 [10]
          size                            :   IN    std_logic_vector(3 DOWNTO 0);  -- ufix4
          out_rsvd                        :   OUT   std_logic_vector(0 TO 19)  -- ufix1 [20]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : ConEncoder_fixpt
    USE ENTITY work.ConEncoder_fixpt(rtl);

  -- Signals
  SIGNAL clk                              : std_logic;
  SIGNAL reset                            : std_logic;
  SIGNAL enb                              : std_logic;
  SIGNAL out_rsvd_addr                    : std_logic;  -- ufix1
  SIGNAL out_rsvd_lastAddr                : std_logic;  -- ufix1
  SIGNAL check1_done                      : std_logic;  -- ufix1
  SIGNAL snkDonen                         : std_logic;
  SIGNAL resetn                           : std_logic;
  SIGNAL tb_enb                           : std_logic;
  SIGNAL rdEnb                            : std_logic;
  SIGNAL out_rsvd_done                    : std_logic;  -- ufix1
  SIGNAL out_rsvd_done_enb                : std_logic;  -- ufix1
  SIGNAL rawData_in_rsvd                  : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL holdData_in_rsvd                 : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL rawData_size                     : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL holdData_size                    : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL ce_out                           : std_logic;
  SIGNAL in_rsvd_offset                   : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL in_rsvd_1                        : std_logic_vector(0 TO 9);  -- ufix1 [10]
  SIGNAL size_offset                      : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL size_1                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL size_2                           : std_logic_vector(3 DOWNTO 0);  -- ufix4
  SIGNAL out_rsvd                         : std_logic_vector(0 TO 19);  -- ufix1 [20]
  SIGNAL out_rsvd_expected_1              : std_logic_vector(0 TO 19);  -- ufix1 [20]
  SIGNAL out_rsvd_ref                     : std_logic_vector(0 TO 19);  -- ufix1 [20]
  SIGNAL out_rsvd_testFailure             : std_logic;  -- ufix1

BEGIN
  u_ConEncoder_fixpt : ConEncoder_fixpt
    PORT MAP( in_rsvd => in_rsvd_1,  -- ufix1 [10]
              size => size_2,  -- ufix4
              out_rsvd => out_rsvd  -- ufix1 [20]
              );

  out_rsvd_lastAddr <= '1';

  snkDonen <=  NOT check1_done;

  tb_enb <= resetn AND snkDonen;

  
  rdEnb <= tb_enb WHEN check1_done = '0' ELSE
      '0';

  out_rsvd_done_enb <= out_rsvd_done AND rdEnb;

  clk_gen: PROCESS 
  BEGIN
    clk <= '1';
    WAIT FOR 5 ns;
    clk <= '0';
    WAIT FOR 5 ns;
    IF check1_done = '1' THEN
      clk <= '1';
      WAIT FOR 5 ns;
      clk <= '0';
      WAIT FOR 5 ns;
      WAIT;
    END IF;
  END PROCESS clk_gen;

  reset_gen: PROCESS 
  BEGIN
    reset <= '1';
    WAIT FOR 20 ns;
    WAIT UNTIL clk'event AND clk = '1';
    WAIT FOR 2 ns;
    reset <= '0';
    WAIT;
  END PROCESS reset_gen;

  resetn <=  NOT reset;

  out_rsvd_done <= out_rsvd_lastAddr AND resetn;

  -- Delay to allow last sim cycle to complete
  checkDone_1_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      check1_done <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF out_rsvd_done_enb = '1' THEN
        check1_done <= out_rsvd_done;
      END IF;
    END IF;
  END PROCESS checkDone_1_process;

  enb <= rdEnb AFTER 2 ns;

  -- Data source for in_rsvd
  rawData_in_rsvd(0) <= '1';
  rawData_in_rsvd(1) <= '0';
  rawData_in_rsvd(2) <= '0';
  rawData_in_rsvd(3) <= '1';
  rawData_in_rsvd(4) <= '1';
  rawData_in_rsvd(5) <= '1';
  rawData_in_rsvd(6) <= '1';
  rawData_in_rsvd(7) <= '0';
  rawData_in_rsvd(8) <= '0';
  rawData_in_rsvd(9) <= '0';

  -- holdData reg for in
  stimuli_in_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_in_rsvd <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_in_rsvd <= rawData_in_rsvd;
    END IF;
  END PROCESS stimuli_in_process;

  -- Data source for size
  rawData_size <= to_unsigned(16#A#, 4);

  -- holdData reg for size
  stimuli_size_process: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      holdData_size <= (OTHERS => 'X');
    ELSIF clk'event AND clk = '1' THEN
      holdData_size <= rawData_size;
    END IF;
  END PROCESS stimuli_size_process;

  ce_out <= enb AND (rdEnb AND tb_enb);

  stimuli_in_1: PROCESS (rawData_in_rsvd, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      in_rsvd_offset <= holdData_in_rsvd;
    ELSE
      in_rsvd_offset <= rawData_in_rsvd;
    END IF;
  END PROCESS stimuli_in_1;

  in_rsvd_1 <= in_rsvd_offset AFTER 2 ns;

  stimuli_size_1: PROCESS (rawData_size, rdEnb)
  BEGIN
    IF rdEnb = '0' THEN
      size_offset <= holdData_size;
    ELSE
      size_offset <= rawData_size;
    END IF;
  END PROCESS stimuli_size_1;

  size_1 <= size_offset AFTER 2 ns;

  size_2 <= std_logic_vector(size_1);

  -- Data source for out_rsvd_expected
  out_rsvd_expected_1(0) <= '1';
  out_rsvd_expected_1(1) <= '1';
  out_rsvd_expected_1(2) <= '1';
  out_rsvd_expected_1(3) <= '0';
  out_rsvd_expected_1(4) <= '1';
  out_rsvd_expected_1(5) <= '1';
  out_rsvd_expected_1(6) <= '0';
  out_rsvd_expected_1(7) <= '0';
  out_rsvd_expected_1(8) <= '0';
  out_rsvd_expected_1(9) <= '1';
  out_rsvd_expected_1(10) <= '1';
  out_rsvd_expected_1(11) <= '1';
  out_rsvd_expected_1(12) <= '1';
  out_rsvd_expected_1(13) <= '0';
  out_rsvd_expected_1(14) <= '1';
  out_rsvd_expected_1(15) <= '0';
  out_rsvd_expected_1(16) <= '0';
  out_rsvd_expected_1(17) <= '1';
  out_rsvd_expected_1(18) <= '0';
  out_rsvd_expected_1(19) <= '1';

  out_rsvd_ref <= out_rsvd_expected_1;

  out_rsvd_checker: PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      out_rsvd_testFailure <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF ce_out = '1' AND out_rsvd /= out_rsvd_ref THEN
        out_rsvd_testFailure <= '1';
        ASSERT FALSE
          REPORT "Error in out_rsvd: Expected " & to_hex(out_rsvd_ref) & (" Actual " & to_hex(out_rsvd))
          SEVERITY ERROR;
      END IF;
    END IF;
  END PROCESS out_rsvd_checker;

  completed_msg: PROCESS (clk)
  BEGIN
    IF clk'event AND clk = '1' THEN
      IF check1_done = '1' THEN
        IF out_rsvd_testFailure = '0' THEN
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (PASSED)**************"
            SEVERITY NOTE;
        ELSE
          ASSERT FALSE
            REPORT "**************TEST COMPLETED (FAILED)**************"
            SEVERITY NOTE;
        END IF;
      END IF;
    END IF;
  END PROCESS completed_msg;

END rtl;

